Given a sorted array of size N and an integer K, find the position(0-based indexing) at which K is present in the array using binary search without recursion


sample inputs :

Example 1:

Input:
N = 5
arr[] = {1 2 3 4 5} 
K = 4
Output: 3
Explanation: 4 appears at index 3.

Example 2:

Input:
N = 5
arr[] = {11 22 33 44 55} 
K = 445
Output: -1
Explanation: 445 is not present.


Your Task:  
You dont need to read input or print anything. Complete the function binarysearch() which takes arr[], N and K as input parameters and returns the index of K in the array. If K is not present in the array, return -1.


Expected Time Complexity: O(LogN)
Expected Auxiliary Space: O(LogN) if solving recursively and O(1) otherwise.


Constraints:

1 <= N <= 105
1 <= arr[i] <= 106
1 <= K <= 106


Solution:


class Solution {
    
    int binarysearch(int arr[], int n, int k) 
    {
        int low = 0;
        int high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == k) {
                return mid;
            }

            if (arr[mid] < k) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }
    
}


STEP 1 : Initializing the high as n-1 and low as 0.
STEP 2 : the loop will run until and unless the low < high
STEP 3 : we calculate the mid = low + high. and cheaking if the key == mid if true then retur mid.
STEP 4 : keep doing this untill u found the element.
Given an array Arr of size N, print the second largest distinct element from an array. If the second largest element doesn't exist then return -1.

Example 1:

Input: 
N = 6
Arr[] = {12, 35, 1, 10, 34, 1}
Output: 34
Explanation: The largest element of the 
array is 35 and the second largest element
is 34.
Example 2:

Input: 
N = 3
Arr[] = {10, 5, 10}
Output: 5
Explanation: The largest element of 
the array is 10 and the second 
largest element is 5.
Your Task:
You don't need to read input or print anything. Your task is to complete the function print2largest() which takes the array of integers arr and n as parameters and returns an integer denoting the answer. If 2nd largest element doesn't exist then return -1.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
2 ≤ N ≤ 105
1 ≤ Arri ≤ 105

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

SOLUTIONS:
----------

class Solution {
    int print2largest(int arr[], int n) {
        int max = Integer.MIN_VALUE;
        int s_max= Integer.MIN_VALUE;
        
        for(int i = 0;i<n;i++)
        {
            if(arr[i]>max)
            {
                max=arr[i];
            }
        }
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]<max && arr[i]>s_max)
            s_max=arr[i];
        }
        
        if(s_max == Integer.MIN_VALUE)
        return -1;
        
        return s_max;
    }
}

STEPS::
--------
we first find the max value in the array and then find the second max value. at the end the second max == Integer.MIN_VALUE. we return -1 else we return second maximum value.
Given a binary array A[] of size N. The task is to arrange the array in increasing order.
Note: The binary array contains only 0  and 1.

Example 1:

Input: 
5
1 0 1 1 0

Output: 
0 0 1 1 1

Explanation: 
After arranging the elements in 
increasing order, elements will be as 
0 0 1 1 1.
Example 2:

Input:
10
1 0 1 1 1 1 1 0 0 0

Output: 
0 0 0 0 1 1 1 1 1 1

Explanation: 
After arranging the elements in 
increasing order, elements will be 
0 0 0 0 1 1 1 1 1 1.

Your Task: This is a function problem. You only need to complete the function binSort() that takes the array A[] and it's size N as parameters and sorts the array. The printing is done automatically by the driver code.

Expected Time Complexity: O(N)
Expected Auxilliary Space: O(1)

Constraints:
1 <= N <= 106
0 <= A[i] <= 1


SOLUTION:

class Solution
{
    //Function to sort the binary array.
    static void binSort(int A[], int N)
    {   int[] count = new int[2];
        for (int i = 0; i < A.length; i++) {
            count[A[i]]++;
        }
        int index = 0;
        for (int i = 0; i < count.length; i++) {
            for (int j = 0; j < count[i]; j++) {
                 A[index++] = i;
            }
        }
        
        
        /**************
        * No need to print the array
        * ************/
    }
}


EXPLANATION:
This function first counts the number of occurrences of each value in the array using a count array. It then iterates through the count array and sets the elements in the original array to the current value based on the count. This algorithm has a time complexity of O(n) for a binary array of length n, which is much more efficient than the bubble sort algorithm.

If the simple sorting algorithm like bubble sort exceeds the time limit, you may want to consider using a more efficient sorting algorithm for large binary arrays. One such algorithm is the Counting Sort algorithm, which takes advantage of the fact that the array contains only two possible values (0 and 1). Here's an example of how you could implement this algorithm in Java:

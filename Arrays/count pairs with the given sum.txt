QUESTION:
----------

Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.


Example 1:

Input:
N = 4, K = 6
arr[] = {1, 5, 7, 1}
Output: 2
Explanation: 
arr[0] + arr[1] = 1 + 5 = 6 
and arr[1] + arr[3] = 5 + 1 = 6.

Example 2:

Input:
N = 4, K = 2
arr[] = {1, 1, 1, 1}
Output: 6
Explanation: 
Each 1 will produce sum 2 with any 1.

Your Task:
You don't need to read input or print anything. Your task is to complete the function getPairsCount() which takes arr[], n and k as input parameters and returns the number of pairs that have sum K.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 105
1 <= K <= 108
1 <= Arr[i] <= 106
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

SOLUTIONS::
-----------

class Solution {
    int getPairsCount(int[] arr, int n, int k) {
        HashMap <Integer , Integer> countMap = new HashMap<> ();
        int count = 0;
        
        for(int i=0;i<n;i++)
        {
            int complement = k - arr[i];
            if(countMap.containsKey(complement))
            {
                count += countMap.get(complement);
            }
            countMap.put(arr[i], countMap.getOrDefault(arr[i],0)+ 1);
            
        }
        return count;
    }
}


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

EXPLANATIONS::
---------------

Create an empty HashMap called countMap to store the count of each number in the array.
Initialize a variable count to zero to keep track of the number of pairs that add up to k.
Iterate through the array arr using a for loop. For each element arr[i], do the following:
Calculate the complement of arr[i] by subtracting it from k.
Check if the complement exists in the countMap using the containsKey method.
If the complement exists, retrieve its count from the countMap using the get method and add it to the count variable.
Add the current element arr[i] to the countMap using the put method. If the element already exists in the countMap, increment its count by one using the getOrDefault method.
After the for loop finishes iterating through the array, return the count variable which contains the number of pairs that add up to k.


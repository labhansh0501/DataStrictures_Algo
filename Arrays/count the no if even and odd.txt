Given an array A[] of N elements. The task is to return the count of the number of odd and even elements in the array.

Example:

Input:
N = 5
A[] = 1 2 3 4 5
Output:
3 2
Explanation:
There are 3 odd elements (1, 3, 5)
and 2 even elements (2 and 4).

Your Task:
Your task is to complete the function countOddEven() which should return the count of odd and even elements of the array.

Expected Time Complexity: O(N)
Expected Space Complexity: O(1)

Constraints:
1 <= N <= 106
1 <= Ai <= 106


:::::::::::::::::::::::::::::::::::::::

Solution:
class Solution
{
    public int[] countOddEven(int[] arr, int n)
    {
        int a[] = new int[2];
        for(int i=0;i<n;i++)
        {
            if((arr[i] & 1)!=1)
            a[1]++;
            
            else
            a[0]++;
        }
        
        
        return a;
    }
}


STEPS INVOLVED:::::
--------------------

So hear we are using bit manupulation to cheak weather the no is even or odd and increasing the count if even no and odd numbers using a separatre array of siz 2 and rasing the count of 0th cell if number is odd and count of 1th cell is increased when ever the number is even.

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

THE BIT MANUPULATION LOGIC:
---------------------------

SO we are cheaking weather the number's binary format has last bit set or not (Set means weather the last bit is 1 or 0). If the last bit is set the number is odd and is the last bit is unset the number is even. we are cheaking that using the Binaray AND(&).

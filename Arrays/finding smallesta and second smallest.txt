Given an array of integers, your task is to find the smallest and second smallest element in the array. If smallest and second smallest do not exist, print -1.

Example 1:

Input :
5
2 4 3 5 6
Output :
2 3 
Explanation: 
2 and 3 are respectively the smallest 
and second smallest elements in the array.

Example 2:

Input :
6
1 2 1 3 6 7
Output :
1 2 
Explanation: 
1 and 2 are respectively the smallest 
and second smallest elements in the array.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function minAnd2ndMin() which takes the array A[] and its size N as inputs and returns a vector containing the smallest and second smallest element if possible, else return {-1,-1}.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1<=N<=105
1<=A[i]<=105

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

SOLUTION:
----------

class Compute 
{
    public long[] minAnd2ndMin(long a[], long n)  
    {
        long smallest = Long.MAX_VALUE;
        long secondSmallest = Long.MAX_VALUE;
        
        for(int i=0 ;i<n; i++){
            if(a[i]<smallest){
                secondSmallest = smallest;
                smallest = a[i];
            }
            else if(a[i]<secondSmallest && a[i]!=smallest) secondSmallest = a[i];
        }
        
        long[] arr = new long[2];
        if(smallest == Long.MAX_VALUE || secondSmallest ==  Long.MAX_VALUE ){
        arr[0]=-1;
        arr[1]=-1;
        }
        
        else { arr[0]=smallest;
        arr[1]=secondSmallest;}
        return arr;
    }
}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

STEPS to SOLVE:
----------------


Here we are assing the two variables with the max value of integer using "Integer.MAX_VALUE".
Now, 
For normal array we just go on cheaking the number less than smallest and if find a number less than smallest we assing value of smallest to secondSmallest and samllest to that number .
For array like {2,2,2,2,6}, We have to cheak the number the number less than secondSmallest and not equal to smallest we assign that number to second smallest.

And for arrays like {1,1,1,1,1}; Where all the elements are same , the we need to add a condition at the last where we cheak if the value of smallest and secondSmallest == Integer.MAX_VALUE we return -1,
ELSE we return the number.


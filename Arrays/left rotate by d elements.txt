Given an array of size n. The task is to rotate array by d elements where d ≤ n.

Example 1:

Input:
n = 7
arr[] = {-1, -2, -3, 4, 5, 6, 7}
d = 2
Output: {-3, 4, 5, 6, 7, -1, -2}
Explanation: 
Rotate by 1: [-2, -3, 4, 5, 6, 7, -1]
Rotate by 2: [-3, 4, 5, 6, 7, -1, -2]

Example 2:

Input:
n = 4
arr[] = {1, 3, 4, 2}
d = 3
Output: {2, 1, 3, 4}

Your Task:
You don't need to read input or print anything. Your task is to complete the function leftRotate() which takes the array of integers arr[], its size n and d as input parameters and rotates arr[] in-place without using any extra memory.


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ n ≤ 106
-109 ≤ arr[i] ≤ 109
0 ≤ d ≤ n


SOLUTIONS::::

class Solution {

    ::::COMMENTED PART STRATS


    // void Rotate(int arr[],int n)
    // {
    //     int temp = arr[0];
    //     for(int i=0;i<n-1;i++)
    //     {
    //         arr[i] = arr[i+1];
    //     }
    //     arr[n-1] =temp;
    // }

:::: COMMENTED PARTS ENDS


    void leftRotate(int[] arr, int n, int d) {
        while (d!=0)
        {
            int temp = arr[0];
            for(int j=0;j<n-1;j++)
            {
                arr[j] = arr[j+1];
            }
            arr[n-1] =temp;
            
            d--
        }
    }
}





ANOTHER SOLUTION USING CYCLIC AND BLOCK SWAO Technique::

void leftRotate(int[] arr, int n, int d) {
    if (d == 0 || d % n == 0)
        return;

    d = d % n;

    int[] temp = new int[d];
    for (int i = 0; i < d; i++)
        temp[i] = arr[i];

    for (int i = d; i < n; i++)
        arr[i - d] = arr[i];

    for (int i = 0; i < d; i++)
        arr[n - d + i] = temp[i];
}
